# AUTHOR / SPEAKER QUICK-SYNC ‚Äì PROJECT OVERVIEW

*(Sync the **author-speaker** Airtable table with the **author-speaker** WordPress taxonomy)*

> This document plugs straight into the Quick-Sync MASTER BLUEPRINT and the WP-Plugin Blueprint we fleshed out earlier.
> 
> 
> Wherever the master docs say ‚Äúpost‚Äù or ‚ÄúCPT‚Äù, read **‚Äútaxonomy term‚Äù** for this project.
> 

---

## 1 ¬∑ What we‚Äôre building

| Source | Target | Purpose |
| --- | --- | --- |
| **Airtable table** `author-speaker` | **WordPress taxonomy** `author-speaker` | Keep author names, slugs, bios, profile images, and a unique SKU perfectly mirrored so every post, series, or session can reference the same canonical Author term. |

The approach is identical to Series / Events Quick-Sync ‚Äì but the WP endpoint manipulates **terms** instead of **posts**.

---

## 2 ¬∑ High-Level Workflow (same bones)

1. **Button click** in Airtable ‚Üí `sync_status = "Queued"`.
2. **AuthorMediaScript.js** uploads / syncs the profile image.
3. **AuthorsQuickSyncScript.js** builds a payload and hits `/author-sync`.
4. WP plugin **AuthorsQuickSyncWP.php** creates/updates the taxonomy term and its meta.
5. Success branch stamps `wp_id`, `sync_status = "Done"`, `publish_timestamp`.

*(See the Mermaid ladder in the MASTER BLUEPRINT for a pictorial view ‚Äì it‚Äôs 100 % the same.)*

---

## 3 ¬∑ Field-Mapping Cheat-Sheet

| Airtable Field | WP Payload Key | Stored As | Notes |
| --- | --- | --- | --- |
| `author_title` | `name` | Term name | Required. |
| `author_slug` | `slug` | Term slug | Should stay unique. |
| `author_description` | `as_description` | Term description | Uses description column visible in WP Admin. |
| `profile_image_wp_id` | `profile_image` | Term meta (ID) | Image ID from MediaScript. |
| `sku` | `sku` | Term meta (`sku`) & **top-level** payload key | Primary unique key for de-duplication. |

No `post_status`, `post_date`, or custom permalinks ‚Äì they don‚Äôt exist for taxonomy terms.

---

## 4 ¬∑ AuthorMediaScript.js ‚Äì what‚Äôs special?

- **Table name** hard-coded to `author-speaker`.
- Only one image set (`profile_image_*`).
- Uses the same ‚Äúskip if `media_last_modified` ‚â§ `media_publish_timestamp`‚Äù gate as series.
- Writes three fields per image: **ID**, **URL**, **external cache** ‚Äì ensures idempotent re-runs.
- On any change it bumps `media_publish_timestamp` so Quick-Sync knows the media is fresh.

---

## 5 ¬∑ AuthorsQuickSyncScript.js ‚Äì key points

- **Route suffix**: `/wp-json/four12/v1/author-sync`
- **FIELD_MAP** keeps the transformation declarative; nothing is hand-coded.
- Promotes `sku` to the payload top level so the WP plugin can find the term fast.
- Minimal core keys: **name** & **slug** ‚Äì that‚Äôs all a term really has.
- Verbose logging pipes a truncated payload preview to the Airtable step output for eyeballing.

---

## 6 ¬∑ WP Plugin (AuthorsQuickSyncWP.php) ‚Äì what changes vs the CPT version?

| CPT Plugin Logic | Author-Sync Variant |
| --- | --- |
| **`wp_insert_post()`** / `wp_update_post()` | **`wp_insert_term()`** / `wp_update_term()` |
| Core field map: `post_title`, `post_status`, ‚Ä¶ | Core term map: `name`, `slug`, `description` |
| Uses **post-meta** (`update_post_meta`) | Uses **term-meta** (`update_term_meta`) |
| Featured image = `_thumbnail_id` | Profile image = `profile_image` (meta) |
| Permalink Manager hook (for posts) | **Not needed** ‚Äì term URLs are auto-generated by WP. |
| AIOSEO block for posts | *Optional* ‚Äì AIOSEO allows term meta too; include or remove. |
| SKUs stored via `add_post_meta` | SKUs stored via `update_term_meta` (`sku`) |

Everything else (auth guard, logging wrapper, image sideload helper, diff tracker) is literally copy-pasted from the CPT plugin ‚Äì evidence that the Blueprint pattern holds.

---

## 7 ¬∑ Why the term logic works (under the hood)

1. **De-duplication**:
    
    *Fast path* ‚Äì if the payload carries `wp_id`, we hit `wp_update_term()` directly.
    
    *Fallback* ‚Äì search `author-speaker` taxonomy for `meta_key = 'sku'` & matching value, then update; else insert.
    
2. **Slug safety**:
    
    `*wp_update_term()*` silently fixes duplicate slugs by appending ‚Äú-2‚Äù. The plugin checks for this and logs a warning so editors can rectify duplicates in Airtable.
    
3. **Image meta**:
    
    WordPress core has no official ‚Äúfeatured image‚Äù for terms. JetEngine (and ACF) expose term-meta. Storing the **attachment ID** in `profile_image` gives uniform access in theme templates.
    
4. **Description vs Custom Fields**:
    
    The term‚Äôs ‚ÄúDescription‚Äù box in WP Admin stores HTML; our payload key `as_description` fills that, making the bio visible in any taxonomy archive.
    

---

## 8 ¬∑ Automation Inputs / Secrets

| Input | Example | Where used |
| --- | --- | --- |
| `recordId` | `recabcdef123` | Both scripts |
| `apiBaseUrl` | `https://four12global.com` (no trailing slash) | QuickSyncScript only |
| **Secret** `API-SYNC` | `wpuser:abcd1234APPLICATIONPASS` | Headers for both scripts |

---

## 9 ¬∑ Replicating for *another* term-based taxonomy

1. **Duplicate** AuthorMediaScript.js & AuthorsQuickSyncScript.js.
2. Change:
    - `TABLE_NAME`, `WP_ROUTE_SUFFIX`, `AIRTABLE_TABLE_NAME`
    - `IMAGE_FIELDS` array (if your new taxonomy needs multiple images).
    - The `FIELD_MAP` ‚Äì at minimum map **name**, **slug**, **description**.
3. Duplicate the WP plugin file, tweak constants:
    
    ```php
    const F12_SYNC_TAXONOMY = 'my-new-tax';
    const F12_TAXONOMY_ROUTE = '/my-tax-sync';
    
    ```
    
    Keep the helper functions untouched.
    
4. Update Airtable automation (button label, view filters, status fields).
5. Test with one record ‚Üí check WP term appears with correct slug & image.
6. Remove `console.log` spam / set VERBOSE = false once happy.

---

## 10 ¬∑ Common Pitfalls & Pro Tips

| Gotcha | Symptom | Fix |
| --- | --- | --- |
| **Duplicate slugs** | WP appends ‚Äú-2‚Äù | Make slug field read-only & derive from title in Airtable. |
| **Image shows as blank** | Attachment ID saved but media missing | MediaScript ran against staging while Quick-Sync hit prod. Keep both endpoints in sync. |
| **Term not found by SKU** | New term inserted every click | Someone edited SKU in Airtable; freeze the field once published. |
| **Taxonomy not registered** | 404 on `/wp-json/four12/v1/author-sync` | Register `author-speaker` taxonomy in theme/plugin *before* the Quick-Sync plugin loads. |

---

### TL;DR

*Same Quick-Sync skeleton, different target entity.*

Switch posts ‚Üí terms, adjust three constants, and the Author pipeline hums exactly like Series. Follow this document plus the MASTER BLUEPRINT and you‚Äôll never wrestle with orphaned bios or mismatched profile photos again. üé§

How ‚ÄúParsedown + Quick-Sync‚Äù fits into the Author pipeline

(Markdown in Airtable ‚Üí safe-ish HTML in WordPress, no tears.)

‚∏ª

1 ¬∑ Why we use Parsedown here
	‚Ä¢	Airtable convenience ‚Äì editors can write bios with *italics*, **bold**, > quotes, etc.
	‚Ä¢	WordPress taxonomy fields only accept HTML, not Markdown.
	‚Ä¢	Parsedown gives a zero-config, single-file bridge: you drop vendor/Parsedown.php in the plugin folder, call Parsedown::instance()->text( $markdown ), and out pops HTML ready for the term Description (or a custom meta key if you prefer).

‚∏ª

2 ¬∑ Where the code lives

author-sync/
‚îú‚îÄ‚îÄ author-media-script.js
‚îú‚îÄ‚îÄ authors-quick-sync.php
‚îî‚îÄ‚îÄ vendor/
    ‚îî‚îÄ‚îÄ Parsedown.php   ‚Üê this guy

We keep it inside the plugin (not composer-installed) so production servers with no SSH/composer still work.

‚∏ª

3 ¬∑ What actually happens in AuthorsQuickSyncWP.php
	1.	Payload key ‚Äì Airtable sends author_bio_md (Markdown) and author_description (plain text).
	2.	Plugin step (just before generic meta save):

if ( isset( $payload['author_bio_md'] ) ) {
    $md  = $payload['author_bio_md'];
    unset( $payload['author_bio_md'] );

    // 1. Parse              2. Very quick sanitise
    $html = wp_kses_post( Parsedown::instance()->text( $md ) );

    // 3. Save to term description
    wp_update_term( $term_id, F12_SYNC_TAXONOMY, [ 'description' => $html ] );
    f12_sync_log( "Parsedown: bio converted & saved for term {$term_id}" );
    $changed_summary['core'][] = 'description (Parsedown)';
}


	3.	Why wp_kses_post after Parsedown?
Parsedown happily converts [script>alert(1) into <script> tags. A quick wp_kses_post() strip-safes that output without needing a full Purifier.
	4.	Diff tracking ‚Äì we flag ‚Äúdescription (Parsedown)‚Äù so Airtable sees that content changed.

‚∏ª

4 ¬∑ How to replicate in another Quick-Sync plugin

Step	What to do
1	Copy vendor/Parsedown.php into your new plugin folder.
2	require_once __DIR__ . '/vendor/Parsedown.php'; near the top of the plugin file (after the constant declarations).
3	Pick a payload key (e.g. event_notes_md). In the main handler, run the 3-line block above, saving to either post_content, description, or a custom meta.
4	Sanitize with wp_kses_post() unless you 100 % trust your editors.
5	unset() the Markdown key so it doesn‚Äôt fall into the generic meta loop.


‚∏ª

5 ¬∑ Common pitfalls & pro tips

Gotcha	Symptom	Fix
Parsedown class not found	Fatal error	Wrong path in require_once; remember __DIR__ is plugin root.
Markdown saved as raw text	Bio in WP shows **bold**	You forgot to run the Parsedown block or you saved the wrong field.
Sneaky <script> survives	XSS alert	You skipped wp_kses_post() (or another sanitiser).
Double conversion on re-sync	Bold text turns into <p><strong>‚Ä¶ nestled twice	Make sure you only convert if Markdown key is present; don‚Äôt reconvert stored HTML.


‚∏ª

6 ¬∑ Why not use JetEngine WYSIWYG or Gutenberg blocks instead?
	‚Ä¢	Simplicity ‚Äì Parsedown is one file, no JSON overhead, perfect for ‚Äúfire-and-forget‚Äù term descriptions.
	‚Ä¢	Consistency ‚Äì The same Markdown content can be rendered in mobile apps, emails, or static sites without pulling HTML out of WP.
	‚Ä¢	Editorial friendliness ‚Äì Most writers know *italic* faster than <em>.

‚∏ª

7 ¬∑ TL;DR

Drop Markdown in Airtable ‚Üí Parsedown in the plugin converts ‚Üí wp_kses_post() scrubs ‚Üí WordPress term description looks gorgeous.
Add those five integration lines to any new Quick-Sync plugin and your content team can keep writing in Markdown glory.